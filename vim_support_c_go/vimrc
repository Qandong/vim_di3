" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible             " be iMproved

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=100		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set title
set ttyfast
set expandtab
set tabstop=4
set shiftwidth=4
"常用
"set fdm=indent syntax
"set cc=80 cc=0
"set cuc

" Configure bundles:
"set nocompatible   "已经在上面定义
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle mange Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
" 
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
" non github repos
Bundle 'git://git.wincent.com/command-t.git'

Bundle 'git://github.com/Lokaltog/vim-powerline.git'

" YouCompleteMe
Bundle 'Valloric/YouCompleteMe'
" ...
"
Bundle 'git://github.com/plasticboy/vim-markdown.git'

Bundle 'git://github.com/scrooloose/nerdtree.git'

Bundle 'https://github.com/fishy/projtags-vim'

Bundle 'https://github.com/vim-scripts/AutoTag'

Bundle 'https://github.com/vim-scripts/taglist.vim'

Bundle 'https://github.com/fatih/vim-go'
" 用于vim-go To get displayed source code tag informations on a sidebar
Bundle 'https://github.com/majutsushi/tagbar'


"Bundle 'https://github.com/vim-scripts/cscope.vim'

let g:ycm_confirm_extra_conf = 0 "set to 1 YCM will ask once per .ycm_extra_conf.py file if it is safe to be loaded. 


filetype plugin indent on     " required! 下面也有
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed...


"powerline
set guifont=PowerlineSymbols\ for\ Powerline
set laststatus=2   " Always show the statusline
"set encoding=utf-8 " Necessary to show Unicode glyphs
set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
let g:Powerline_symbols = 'compatible'


execute pathogen#infect()



" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif
set clipboard=unnamedplus

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default iletype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

let g:vim_markdown_folding_disabled=1

nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>

"配置NERDTree
nnoremap <F3> :NERDTreeToggle<CR> 
" 在关闭最后一个文件时自动关闭NERDTree窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

""配置Taglist 弃用 采用Tagbar
"nnoremap <F2> :TlistToggle<CR>
"let Tlist_Show_One_File = 1 "不同时显示多个文件的tag,只显示当前文件的
"let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口,则退出vim
"let Tlist_Use_Right_Window = 1 "在右侧窗口中显示taglist窗口
"let Tlist_Use_SingleClick = 1 "单击tag就跳转(默认是双击)
"let Tlist_File_Fold_Auto_Close = 1 "使taglist只显示当前文件的tag,其他文件的tag都被折叠起来
"let Tlist_Process_File_Always = 1 "使taglist始终解析文件中的tag,不管taglist窗口有没有打开

"配置cscope
"set csprg=/usr/bin/cscope
"set cscopetag
"set csto=0
"set cscopeverbose "noscverb
" add any cscope database in current directory
"if filereadable("cscope.out")
 "  cs add cscope.out
" else add the database pointed to by environment variable
"elseif $CSCOPE_DB != ""
 "  cs add $CSCOPE_DB
"endif

" show msg when any other cscope db added
"set cscopeverbose 

"nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	
"nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	
"nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	
"nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	
"nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	
"nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	
"nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
"nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>	



let &termencoding=&encoding
set fileencodings=ucs-bom,utf-8,gbk

" Some Linux distributions set filetype in /etc/vimrc.
" Clear filetype flags before changing runtimepath to force Vim to reload them.
filetype off
filetype plugin indent off
set runtimepath+=/home/di3/.vim/bundle/vim-go
filetype plugin indent on
syntax on

"vim-go setting
"Disable opening browser after posting to your snippet to play.golang.org
let g:go_play_open_browser = 0
"Enable goimports to automatically insert import paths instead of gofmt
"go 如果导入一个包但是并没有使用会报错
"在保存的时候如果使用gofmt则检测不出来这个错误,但是goimports就可以检测,然后自动删除没有使用的包
"暂时不用这个特性,后面编译的时候出问题了再手动改
"let g:go_fmt_command = "goimports"
"On-the-fly type information about the word under the cursor
let g:go_auto_type_info = 1
"enable syntax-highlighting for Functions, Methods and Structs
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_array_whitespace_error = 1
"tarbar 用于vim-go
"替换taglist 
nnoremap <F2> :TagbarToggle<CR>
let g:tagbar_singleclick = 1
"set the tags are sorted according to their order in the source file.
let g:tagbar_sort = 0
